snippet for "Standard for loop"
for(std::size_t ${1:i}=${2:0}; $1$3; $1${4:++})
endsnippet

snippet fore "for each loop"
for($1 : $2)
endsnippet

snippet vec "vector"
std::vector<$1>
endsnippet

snippet map "unordered hash map"
std::unordered_map<$1>
endsnippet

snippet set "similar to map, but only the key"
std::unordered_set<$1>
endsnippet

snippet omap "ordered map, most likely RBTree"
std::map<$1>
endsnippet

snippet oset "similar to omap, but only the key"
std::set<$1>
endsnippet

snippet main "main function"
int main(){
	$1
}
endsnippet	

snippet maina "main function with arguments"
int main(int argc, char* argv[]){
	$1
}
endsnippet

snippet temp "template"
template <typename $1>
endsnippet

snippet class "generic class template"
class $1 {
	public:
		$2
	private:
		$3
};
endsnippet

snippet guard "header guard"
#ifndef ${1:`!p snip.rv = snip.fn.replace('.','_').upper() + '_'`}
#define $1
$2
#endif
endsnippet

snippet header "full header file with class and guard"
#ifndef ${1:`!p snip.rv = snip.fn.replace('.','_').upper() + '_'`}
#define $1

class ${2: `!p snip.rv = "".join(map(lambda x:x.capitalize(),snip.fn[:snip.fn.index('.')].split('_')))`} {
	public:
		$3
	private:
		$4
};

#endif
endsnippet

snippet try "try/catch block"
try{
	$1
} catch (${2:...}) {
	$3
}
endsnippet

snippet if "if"
if($1){
	$2
}
endsnippet

snippet elif "else if"
else if($1){
	$2
}
endsnippet

snippet else "else"
else{
	$1
}
endsnippet

snippet while "while"
while($1){
	$2
}
endsnippet

snippet cout "cout"
std::cout << $1 << std::endl;
endsnippet

snippet new "heap object creation"
${1:auto} $2 = new $3($4);
endsnippet
